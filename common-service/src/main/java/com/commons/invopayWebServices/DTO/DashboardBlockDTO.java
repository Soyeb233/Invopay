/*
 * This file is generated by jOOQ.
 */
package com.commons.invopayWebServices.DTO;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DashboardBlockDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer       dashboardBlockId;
    private String        dashboardBlockName;
    private String        dashboardBlockKey;
    private Integer       columnWidth;
    private Integer       sortOrder;
    private Integer       refActiveStatusId;
    private Integer       refUserId;
    private Integer       deleteStatus;
    private Integer       transactionId;
    private LocalDateTime addedDate;

    public DashboardBlockDTO() {}

    public DashboardBlockDTO(DashboardBlockDTO value) {
        this.dashboardBlockId = value.dashboardBlockId;
        this.dashboardBlockName = value.dashboardBlockName;
        this.dashboardBlockKey = value.dashboardBlockKey;
        this.columnWidth = value.columnWidth;
        this.sortOrder = value.sortOrder;
        this.refActiveStatusId = value.refActiveStatusId;
        this.refUserId = value.refUserId;
        this.deleteStatus = value.deleteStatus;
        this.transactionId = value.transactionId;
        this.addedDate = value.addedDate;
    }

    public DashboardBlockDTO(
        Integer       dashboardBlockId,
        String        dashboardBlockName,
        String        dashboardBlockKey,
        Integer       columnWidth,
        Integer       sortOrder,
        Integer       refActiveStatusId,
        Integer       refUserId,
        Integer       deleteStatus,
        Integer       transactionId,
        LocalDateTime addedDate
    ) {
        this.dashboardBlockId = dashboardBlockId;
        this.dashboardBlockName = dashboardBlockName;
        this.dashboardBlockKey = dashboardBlockKey;
        this.columnWidth = columnWidth;
        this.sortOrder = sortOrder;
        this.refActiveStatusId = refActiveStatusId;
        this.refUserId = refUserId;
        this.deleteStatus = deleteStatus;
        this.transactionId = transactionId;
        this.addedDate = addedDate;
    }

    /**
     * Getter for <code>invopay.dashboard_block.dashboard_block_id</code>.
     */
    public Integer getDashboardBlockId() {
        return this.dashboardBlockId;
    }

    /**
     * Setter for <code>invopay.dashboard_block.dashboard_block_id</code>.
     */
    public DashboardBlockDTO setDashboardBlockId(Integer dashboardBlockId) {
        this.dashboardBlockId = dashboardBlockId;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.dashboard_block_name</code>. Block Name
     */
    public String getDashboardBlockName() {
        return this.dashboardBlockName;
    }

    /**
     * Setter for <code>invopay.dashboard_block.dashboard_block_name</code>. Block Name
     */
    public DashboardBlockDTO setDashboardBlockName(String dashboardBlockName) {
        this.dashboardBlockName = dashboardBlockName;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.dashboard_block_key</code>. Block Key
     */
    public String getDashboardBlockKey() {
        return this.dashboardBlockKey;
    }

    /**
     * Setter for <code>invopay.dashboard_block.dashboard_block_key</code>. Block Key
     */
    public DashboardBlockDTO setDashboardBlockKey(String dashboardBlockKey) {
        this.dashboardBlockKey = dashboardBlockKey;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.column_width</code>. Cloumn
     */
    public Integer getColumnWidth() {
        return this.columnWidth;
    }

    /**
     * Setter for <code>invopay.dashboard_block.column_width</code>. Cloumn
     */
    public DashboardBlockDTO setColumnWidth(Integer columnWidth) {
        this.columnWidth = columnWidth;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.sort_order</code>. Sort Order
     */
    public Integer getSortOrder() {
        return this.sortOrder;
    }

    /**
     * Setter for <code>invopay.dashboard_block.sort_order</code>. Sort Order
     */
    public DashboardBlockDTO setSortOrder(Integer sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.ref_active_status_id</code>. Status
     */
    public Integer getRefActiveStatusId() {
        return this.refActiveStatusId;
    }

    /**
     * Setter for <code>invopay.dashboard_block.ref_active_status_id</code>. Status
     */
    public DashboardBlockDTO setRefActiveStatusId(Integer refActiveStatusId) {
        this.refActiveStatusId = refActiveStatusId;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.ref_user_id</code>. User
     */
    public Integer getRefUserId() {
        return this.refUserId;
    }

    /**
     * Setter for <code>invopay.dashboard_block.ref_user_id</code>. User
     */
    public DashboardBlockDTO setRefUserId(Integer refUserId) {
        this.refUserId = refUserId;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.delete_status</code>.
     */
    public Integer getDeleteStatus() {
        return this.deleteStatus;
    }

    /**
     * Setter for <code>invopay.dashboard_block.delete_status</code>.
     */
    public DashboardBlockDTO setDeleteStatus(Integer deleteStatus) {
        this.deleteStatus = deleteStatus;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.transaction_id</code>.
     */
    public Integer getTransactionId() {
        return this.transactionId;
    }

    /**
     * Setter for <code>invopay.dashboard_block.transaction_id</code>.
     */
    public DashboardBlockDTO setTransactionId(Integer transactionId) {
        this.transactionId = transactionId;
        return this;
    }

    /**
     * Getter for <code>invopay.dashboard_block.added_date</code>. Added Date
     */
    public LocalDateTime getAddedDate() {
        return this.addedDate;
    }

    /**
     * Setter for <code>invopay.dashboard_block.added_date</code>. Added Date
     */
    public DashboardBlockDTO setAddedDate(LocalDateTime addedDate) {
        this.addedDate = addedDate;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DashboardBlockDTO other = (DashboardBlockDTO) obj;
        if (dashboardBlockId == null) {
            if (other.dashboardBlockId != null)
                return false;
        }
        else if (!dashboardBlockId.equals(other.dashboardBlockId))
            return false;
        if (dashboardBlockName == null) {
            if (other.dashboardBlockName != null)
                return false;
        }
        else if (!dashboardBlockName.equals(other.dashboardBlockName))
            return false;
        if (dashboardBlockKey == null) {
            if (other.dashboardBlockKey != null)
                return false;
        }
        else if (!dashboardBlockKey.equals(other.dashboardBlockKey))
            return false;
        if (columnWidth == null) {
            if (other.columnWidth != null)
                return false;
        }
        else if (!columnWidth.equals(other.columnWidth))
            return false;
        if (sortOrder == null) {
            if (other.sortOrder != null)
                return false;
        }
        else if (!sortOrder.equals(other.sortOrder))
            return false;
        if (refActiveStatusId == null) {
            if (other.refActiveStatusId != null)
                return false;
        }
        else if (!refActiveStatusId.equals(other.refActiveStatusId))
            return false;
        if (refUserId == null) {
            if (other.refUserId != null)
                return false;
        }
        else if (!refUserId.equals(other.refUserId))
            return false;
        if (deleteStatus == null) {
            if (other.deleteStatus != null)
                return false;
        }
        else if (!deleteStatus.equals(other.deleteStatus))
            return false;
        if (transactionId == null) {
            if (other.transactionId != null)
                return false;
        }
        else if (!transactionId.equals(other.transactionId))
            return false;
        if (addedDate == null) {
            if (other.addedDate != null)
                return false;
        }
        else if (!addedDate.equals(other.addedDate))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.dashboardBlockId == null) ? 0 : this.dashboardBlockId.hashCode());
        result = prime * result + ((this.dashboardBlockName == null) ? 0 : this.dashboardBlockName.hashCode());
        result = prime * result + ((this.dashboardBlockKey == null) ? 0 : this.dashboardBlockKey.hashCode());
        result = prime * result + ((this.columnWidth == null) ? 0 : this.columnWidth.hashCode());
        result = prime * result + ((this.sortOrder == null) ? 0 : this.sortOrder.hashCode());
        result = prime * result + ((this.refActiveStatusId == null) ? 0 : this.refActiveStatusId.hashCode());
        result = prime * result + ((this.refUserId == null) ? 0 : this.refUserId.hashCode());
        result = prime * result + ((this.deleteStatus == null) ? 0 : this.deleteStatus.hashCode());
        result = prime * result + ((this.transactionId == null) ? 0 : this.transactionId.hashCode());
        result = prime * result + ((this.addedDate == null) ? 0 : this.addedDate.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DashboardBlock (");

        sb.append(dashboardBlockId);
        sb.append(", ").append(dashboardBlockName);
        sb.append(", ").append(dashboardBlockKey);
        sb.append(", ").append(columnWidth);
        sb.append(", ").append(sortOrder);
        sb.append(", ").append(refActiveStatusId);
        sb.append(", ").append(refUserId);
        sb.append(", ").append(deleteStatus);
        sb.append(", ").append(transactionId);
        sb.append(", ").append(addedDate);

        sb.append(")");
        return sb.toString();
    }
}
