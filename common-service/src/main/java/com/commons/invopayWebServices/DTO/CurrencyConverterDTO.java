/*
 * This file is generated by jOOQ.
 */
package com.commons.invopayWebServices.DTO;


import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrencyConverterDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer       id;
    private Byte          status;
    private String        country;
    private Double        value;
    private String        currencySymbol;
    private LocalDateTime dateTime;

    public CurrencyConverterDTO() {}

    public CurrencyConverterDTO(CurrencyConverterDTO value) {
        this.id = value.id;
        this.status = value.status;
        this.country = value.country;
        this.value = value.value;
        this.currencySymbol = value.currencySymbol;
        this.dateTime = value.dateTime;
    }

    public CurrencyConverterDTO(
        Integer       id,
        Byte          status,
        String        country,
        Double        value,
        String        currencySymbol,
        LocalDateTime dateTime
    ) {
        this.id = id;
        this.status = status;
        this.country = country;
        this.value = value;
        this.currencySymbol = currencySymbol;
        this.dateTime = dateTime;
    }

    /**
     * Getter for <code>invopay.currency_converter.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>invopay.currency_converter.id</code>.
     */
    public CurrencyConverterDTO setId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>invopay.currency_converter.status</code>.
     */
    public Byte getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>invopay.currency_converter.status</code>.
     */
    public CurrencyConverterDTO setStatus(Byte status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>invopay.currency_converter.country</code>.
     */
    public String getCountry() {
        return this.country;
    }

    /**
     * Setter for <code>invopay.currency_converter.country</code>.
     */
    public CurrencyConverterDTO setCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Getter for <code>invopay.currency_converter.value</code>. 1 INR=
     */
    public Double getValue() {
        return this.value;
    }

    /**
     * Setter for <code>invopay.currency_converter.value</code>. 1 INR=
     */
    public CurrencyConverterDTO setValue(Double value) {
        this.value = value;
        return this;
    }

    /**
     * Getter for <code>invopay.currency_converter.currency_symbol</code>.
     */
    public String getCurrencySymbol() {
        return this.currencySymbol;
    }

    /**
     * Setter for <code>invopay.currency_converter.currency_symbol</code>.
     */
    public CurrencyConverterDTO setCurrencySymbol(String currencySymbol) {
        this.currencySymbol = currencySymbol;
        return this;
    }

    /**
     * Getter for <code>invopay.currency_converter.date_time</code>.
     */
    public LocalDateTime getDateTime() {
        return this.dateTime;
    }

    /**
     * Setter for <code>invopay.currency_converter.date_time</code>.
     */
    public CurrencyConverterDTO setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final CurrencyConverterDTO other = (CurrencyConverterDTO) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (status == null) {
            if (other.status != null)
                return false;
        }
        else if (!status.equals(other.status))
            return false;
        if (country == null) {
            if (other.country != null)
                return false;
        }
        else if (!country.equals(other.country))
            return false;
        if (value == null) {
            if (other.value != null)
                return false;
        }
        else if (!value.equals(other.value))
            return false;
        if (currencySymbol == null) {
            if (other.currencySymbol != null)
                return false;
        }
        else if (!currencySymbol.equals(other.currencySymbol))
            return false;
        if (dateTime == null) {
            if (other.dateTime != null)
                return false;
        }
        else if (!dateTime.equals(other.dateTime))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.country == null) ? 0 : this.country.hashCode());
        result = prime * result + ((this.value == null) ? 0 : this.value.hashCode());
        result = prime * result + ((this.currencySymbol == null) ? 0 : this.currencySymbol.hashCode());
        result = prime * result + ((this.dateTime == null) ? 0 : this.dateTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CurrencyConverter (");

        sb.append(id);
        sb.append(", ").append(status);
        sb.append(", ").append(country);
        sb.append(", ").append(value);
        sb.append(", ").append(currencySymbol);
        sb.append(", ").append(dateTime);

        sb.append(")");
        return sb.toString();
    }
}
